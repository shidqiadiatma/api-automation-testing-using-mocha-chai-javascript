{
  "stats": {
    "suites": 1,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2022-10-15T15:41:11.492Z",
    "end": "2022-10-15T15:41:33.069Z",
    "duration": 21577,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "380b04db-43de-42b0-999c-c818b3302752",
      "title": "",
      "fullFile": "C:\\automation-api-using-mocha-chai-javascript\\automation-api-register.js",
      "file": "\\automation-api-register.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f7ca0252-6ec1-4391-88ba-83e331994308",
          "title": "Test POST /REGISTER",
          "fullFile": "C:\\automation-api-using-mocha-chai-javascript\\automation-api-register.js",
          "file": "\\automation-api-register.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Success Register",
              "fullTitle": "Test POST /REGISTER Verify Success Register",
              "timedOut": false,
              "duration": 1215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TEST CASE\n    let random_email = Math.random().toString(36).substring(7); // MEMBUAT RANDOM KATA\n    const response = await request_url // INI BUAT NGARAH KE URL BARRU.PYTHONANYWHERE.COM\n      .post(\"/register\")\n      .send({ email: random_email + \"@gmail.com\", password: random_email, name: random_email }); // INI SESUAI BODY\n    const hasil_response = response.body; // BERISI HASIL RESPONSE HASIL NEMBAK API, ADA DATA, MESSAGE, STATUS\n    assert(response.body.status).to.eql('SUCCESS_REGISTER');\n    assert(response.body.data).to.eql('berhasil');\n    assert(response.body.message).to.eql('created user!');\n    assert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "2f89903c-1395-42d5-9767-3f9c4355c68b",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Success Register with Additional IP Address in Body",
              "fullTitle": "Test POST /REGISTER Verify Success Register with Additional IP Address in Body",
              "timedOut": false,
              "duration": 568,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text, ip_address: \"127.0.0.1\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('SUCCESS_REGISTER');\nassert(response.body.data).to.eql('berhasil');\nassert(response.body.message).to.eql('created user!');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "b0051cdb-b3eb-4c4b-afcf-6723cb324b06",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Success Register with Additional Params",
              "fullTitle": "Test POST /REGISTER Verify Success Register with Additional Params",
              "timedOut": false,
              "duration": 598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register?email=lalala&password=hahhaha\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text, ip_address: \"127.0.0.1\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('SUCCESS_REGISTER');\nassert(response.body.data).to.eql('berhasil');\nassert(response.body.message).to.eql('created user!');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "4b003e7a-79e6-44b0-981d-550f9358c05f",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Success Register with Random Authorization",
              "fullTitle": "Test POST /REGISTER Verify Success Register with Random Authorization",
              "timedOut": false,
              "duration": 597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .set({ Authorization: `Bearer asjdhgagduahuidghaiduawgdiuwaghsgjhagdjhgdshjsgd` })\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text});\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('SUCCESS_REGISTER');\nassert(response.body.data).to.eql('berhasil');\nassert(response.body.message).to.eql('created user!');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "eb60eba1-d030-4384-80c5-5d8059ddd283",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Success Register with Random Authorization and Params",
              "fullTitle": "Test POST /REGISTER Verify Success Register with Random Authorization and Params",
              "timedOut": false,
              "duration": 597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register?email=bahahahaahaha@gmail.com&password=waluyo\")\n  .set({ Authorization: `Bearer asjdhgagduahuidghaiduawgdiuwaghsgjhagdjhgdshjsgd` })\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text});\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('SUCCESS_REGISTER');\nassert(response.body.data).to.eql('berhasil');\nassert(response.body.message).to.eql('created user!');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "46b4cc9e-d913-4aec-8a28-35d6aefe6918",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Empty Body, Only Dictionary",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Empty Body, Only Dictionary",
              "timedOut": false,
              "duration": 597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_pass = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ });\nconst hasil_response = response.body;\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "c80b80b2-98ab-45b0-af51-00d1c78e4c65",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Empty Password",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Empty Password",
              "timedOut": false,
              "duration": 1102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: \"\", name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email/Username/Password tidak boleh kosong');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "bdd75a23-e6c6-4865-b969-016b86a84290",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Empty Email",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Empty Email",
              "timedOut": false,
              "duration": 510,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: \"\", password: \"testerjago\", name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email/Username/Password tidak boleh kosong');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "ed080fec-e639-4101-98df-9c5af6f2c7d1",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Empty Name",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Empty Name",
              "timedOut": false,
              "duration": 501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: \"testerjago\", name: \"\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email/Username/Password tidak boleh kosong');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "4fb7b912-9639-4046-98ca-b1b751e1744c",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Symbol in Name Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Symbol in Name Field",
              "timedOut": false,
              "duration": 581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: \"testerjago\", name: random_email + \"&#\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Nama atau password tidak valid');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "3d8d9648-7f2f-4aec-ac1d-13339ebdbd88",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Symbol in Email Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Symbol in Email Field",
              "timedOut": false,
              "duration": 606,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: \"#$$$$$\", password: \"testerjago\", name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "fd76e3a9-5b22-4e3b-b714-b97aa91f4e1f",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with SQLI in Password Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with SQLI in Password Field",
              "timedOut": false,
              "duration": 570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: \"SELECT\", name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Nama atau password tidak valid');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "4e9de4a7-a10e-4068-a0e1-596462e01270",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with SQLI in Email Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with SQLI in Email Field",
              "timedOut": false,
              "duration": 626,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: \"SELECT id FROM users WHERE username='username' AND password='password' OR 1=1\", password: \"testerjago\", name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "4282f1f4-6af2-4a2d-92d1-d00b22063d76",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with SQLI in Name Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with SQLI in Name Field",
              "timedOut": false,
              "duration": 598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: \"testerjago\", \n          name: \"SELECT%count%(*)%FROM%Users%WHERE%Username='jebol'%or%1=1%--%'%AND%Password=%'email'\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "b9a19620-336b-4407-b00f-957a72df2856",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Body Email Only",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Body Email Only",
              "timedOut": false,
              "duration": 831,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\" });\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "28d23a9a-bc90-48ef-a918-30825a7b76de",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Body Name Only",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Body Name Only",
              "timedOut": false,
              "duration": 567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_name = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ name: random_name});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "d3f8bd2c-b13e-4b9f-a9ee-ca1d5425d1fc",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Body Password Only",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Body Password Only",
              "timedOut": false,
              "duration": 604,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_pass = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ password: random_pass});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "eab48e7c-f9b2-4b03-8a9a-de7d266cb1b6",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Max Char in Email Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Max Char in Email Field",
              "timedOut": false,
              "duration": 597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Array.from(Array(55), () => Math.floor(Math.random() * 36).toString(36)).join('');\nlet random_pass = Array.from(Array(11), () => Math.floor(Math.random() * 36).toString(36)).join('');\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: random_pass, name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email/Username/Password melebihin maksimal karakter');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "723b791e-c55f-41c8-a3ca-18a4f6dd3545",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Max Char in Password Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Max Char in Password Field",
              "timedOut": false,
              "duration": 599,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Array.from(Array(10), () => Math.floor(Math.random() * 36).toString(36)).join('');\nlet random_pass = Array.from(Array(38), () => Math.floor(Math.random() * 36).toString(36)).join('');\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: random_pass, name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email/Username/Password melebihin maksimal karakter');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "7551431e-468c-4444-8f18-9b15403436ef",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register without Body",
              "fullTitle": "Test POST /REGISTER Verify Failed Register without Body",
              "timedOut": false,
              "duration": 566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_pass = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "3a228aa6-3585-4647-b637-ebaf224710b0",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Method GET",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Method GET",
              "timedOut": false,
              "duration": 529,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .get(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text, ip_address: \"127.0.0.1\" });\nassert(response.status).to.eql(405);",
              "err": {},
              "uuid": "9546dc3b-a2f3-41bf-bd90-70adc4c5a54c",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Method PUT",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Method PUT",
              "timedOut": false,
              "duration": 599,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .put(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text, ip_address: \"127.0.0.1\" });\n\nassert(response.status).to.eql(405);",
              "err": {},
              "uuid": "f23a5614-a48f-47c5-ab51-1393da60cc34",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Method PATCH",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Method PATCH",
              "timedOut": false,
              "duration": 1101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .patch(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text, ip_address: \"127.0.0.1\" });\n\nassert(response.status).to.eql(405);",
              "err": {},
              "uuid": "6440dcdd-039f-4cea-85ca-b379e585c9d9",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Form-Data as Body",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Form-Data as Body",
              "timedOut": false,
              "duration": 523,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .type('form')\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "7cedbd43-46e1-4133-966b-a37b6184dbe6",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with xx-www-form-urlencoded as Body",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with xx-www-form-urlencoded as Body",
              "timedOut": false,
              "duration": 578,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .set('content-Type', 'application/x-www-form-urlencoded')\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "e5caaf13-e26a-4a8c-bf8a-ce2ce57abd9f",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Email",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Email",
              "timedOut": false,
              "duration": 597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: 123456789, password: random_text, name: random_text});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "6c59859a-0e5f-4465-a3a0-c14cdc279cb6",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Name",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Name",
              "timedOut": false,
              "duration": 598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: 123456789});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "4311a901-798e-4d44-a213-14dfe92831d1",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Password",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Password",
              "timedOut": false,
              "duration": 610,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: 123456789, name: random_text});\nconst hasil_response = response.body;\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "2affe6a4-d071-42ec-b9fe-a004cd0b14ab",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Email Start with 0",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Email Start with 0",
              "timedOut": false,
              "duration": 588,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: 08123456789, password: random_text, name: random_text});\nconst hasil_response = response.body;\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "35c2174e-ada2-4bf8-82e6-c53c0d03b4a9",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Name Start with 0",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Name Start with 0",
              "timedOut": false,
              "duration": 599,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: 08123456789});\nconst hasil_response = response.body;\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "909c7e78-1ca3-4774-927d-7c36a3c0a2a2",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Password Start with 0",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Password Start with 0",
              "timedOut": false,
              "duration": 1001,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: 08123456789, name: random_text});\nconst hasil_response = response.body;\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "d5d4f34c-5250-4cb3-aaf4-18e01cd8ef5f",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Existing Registered Email Gmail",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Existing Registered Email Gmail",
              "timedOut": false,
              "duration": 535,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request_url\n  .post(\"/register\")\n  .send({ email: \"tester@gmail.com\", password: \"aditya.qa\", name: \"Test Email Gmail\"});\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email sudah terdaftar, gunakan Email lain');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "9235a8e0-cb7b-4835-a614-757d50de8c6c",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with (.) in Existing Registered Email Gmail",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with (.) in Existing Registered Email Gmail",
              "timedOut": false,
              "duration": 565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request_url\n  .post(\"/register\")\n  .send({ email: \"tes.ter@gmail.com\", password: \"aditya.qa\", name: \"Test Email Gmail\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email sudah terdaftar, gunakan Email lain');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "00579674-b703-4e74-a02f-85cb542cb576",
              "parentUUID": "f7ca0252-6ec1-4391-88ba-83e331994308",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f89903c-1395-42d5-9767-3f9c4355c68b",
            "b0051cdb-b3eb-4c4b-afcf-6723cb324b06",
            "4b003e7a-79e6-44b0-981d-550f9358c05f",
            "eb60eba1-d030-4384-80c5-5d8059ddd283",
            "46b4cc9e-d913-4aec-8a28-35d6aefe6918",
            "c80b80b2-98ab-45b0-af51-00d1c78e4c65",
            "bdd75a23-e6c6-4865-b969-016b86a84290",
            "ed080fec-e639-4101-98df-9c5af6f2c7d1",
            "4fb7b912-9639-4046-98ca-b1b751e1744c",
            "3d8d9648-7f2f-4aec-ac1d-13339ebdbd88",
            "fd76e3a9-5b22-4e3b-b714-b97aa91f4e1f",
            "4e9de4a7-a10e-4068-a0e1-596462e01270",
            "4282f1f4-6af2-4a2d-92d1-d00b22063d76",
            "b9a19620-336b-4407-b00f-957a72df2856",
            "28d23a9a-bc90-48ef-a918-30825a7b76de",
            "d3f8bd2c-b13e-4b9f-a9ee-ca1d5425d1fc",
            "eab48e7c-f9b2-4b03-8a9a-de7d266cb1b6",
            "723b791e-c55f-41c8-a3ca-18a4f6dd3545",
            "7551431e-468c-4444-8f18-9b15403436ef",
            "3a228aa6-3585-4647-b637-ebaf224710b0",
            "9546dc3b-a2f3-41bf-bd90-70adc4c5a54c",
            "f23a5614-a48f-47c5-ab51-1393da60cc34",
            "6440dcdd-039f-4cea-85ca-b379e585c9d9",
            "7cedbd43-46e1-4133-966b-a37b6184dbe6",
            "e5caaf13-e26a-4a8c-bf8a-ce2ce57abd9f",
            "6c59859a-0e5f-4465-a3a0-c14cdc279cb6",
            "4311a901-798e-4d44-a213-14dfe92831d1",
            "2affe6a4-d071-42ec-b9fe-a004cd0b14ab",
            "35c2174e-ada2-4bf8-82e6-c53c0d03b4a9",
            "909c7e78-1ca3-4774-927d-7c36a3c0a2a2",
            "d5d4f34c-5250-4cb3-aaf4-18e01cd8ef5f",
            "9235a8e0-cb7b-4835-a614-757d50de8c6c",
            "00579674-b703-4e74-a02f-85cb542cb576"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21453,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-register-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "Register",
        "reportFilename": "api-register-report"
      },
      "version": "6.2.0"
    }
  }
}